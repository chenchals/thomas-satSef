repmat
strrep("ABCDE",5)
z=strrep("ABCDE",5)
as.character(z)
as.array(z)
as.vector(z)
z(1)
z[1]
x <- sample( LETTERS[1:5], 50, replace=FALSE, prob=c(0.2, 0.2, 0.2, 0.2, 0.2) )
x <- sample( LETTERS[1:5], 50, replace=TRUE, prob=c(0.2, 0.2, 0.2, 0.2, 0.2) )
x
Z<-matrix(1:150,nrow = 50);
Z
Z[1,]
Z[,1]
Z[,1] <-sample( LETTERS[1:5], 50, replace=TRUE, prob=c(0.2, 0.2, 0.2, 0.2, 0.2) )
Z
nRep<-10
LETTERS
LETTERS[1:4]
LETTERS[1:5]
ZZ<-LETTERS[1:5]
ZZ
length(ZZ)
nRepeats <- 10
nPapers <- 6
choices = LETTERS[1:5];
Z<-matrix(1:length(choices)*nRepeats,nrow = 50)
Z
Z.C1<-sample( choices, nRepeats*length(choices), replace=TRUE, prob=c(0.2, 0.2, 0.2, 0.2, 0.2) )
Z
Z
nRepeats <- 10
nPapers <- 6
choices = LETTERS[1:5];
Z<-matrix(1:length(choices)*nRepeats,nrow = 50)
Z
1:length(choices)*nRepeats
1:(length(choices)*nRepeats)
Z<-matrix(1:(length(choices)*nRepeats),nrow = 50)
Z.C1<-sample( choices, (nRepeats*length(choices)), replace=TRUE, prob=c(0.2, 0.2, 0.2, 0.2, 0.2) )
Z
Z.C1
install.packages(c("assertthat", "backports", "BH", "bindr", "bindrcpp", "boot", "checkmate", "class", "cli", "cluster", "codetools", "colorspace", "curl", "data.table", "devtools", "digest", "dplyr", "evaluate", "expm", "foreign", "Formula", "GGally", "ggplot2", "git2r", "glue", "gtable", "gtools", "heplots", "hexbin", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httpuv", "httr", "jsonlite", "knitr", "lattice", "lazyeval", "lme4", "markdown", "MASS", "Matrix", "mgcv", "mice", "mime", "msm", "munsell", "nlme", "nloptr", "openssl", "pillar", "pkgconfig", "plogr", "plotly", "polynom", "progress", "purrr", "quantreg", "R6", "Rcpp", "RcppEigen", "reshape", "rlang", "rpart", "rstudioapi", "scales", "shiny", "slam", "smacof", "sourcetools", "stringi", "stringr", "survival", "tibble", "tidyr", "tidyselect", "utf8", "viridis", "weights", "whisker", "wordcloud", "xtable", "yaml"))
sample( LETTERS[1:5], 25, replace=TRUE, prob=c(0.2, 0.2, 0.2, 0.2, 0.2))
sample( LETTERS[1:5], 25, replace=FALSE, prob=c(0.2, 0.2, 0.2, 0.2, 0.2))
sample( LETTERS[1:5], 5,5, prob=c(0.2, 0.2, 0.2, 0.2, 0.2))
sample( LETTERS[1:5], 5,5, prob=c(0.2, 0.2, 0.2, 0.2, 0.2))
strrep(LETTERS[1:5], 1:5)
strrep(LETTERS[1:5], 5)
c(strrep(LETTERS[1:5], 5))
LETTERS[1:5]
rep(LETTERS[1:5], 5)
sample( rep(LETTERS[1:5], 5),25)
sample( rep(LETTERS[1:5], 5),25,replace = FALSE)
sample( rep(LETTERS[1:5], 5),25,replace = FALSE)''
x<-sample( rep(LETTERS[1:5], 5),25,replace = FALSE)
cbind(x)
x<-cbind(sample( rep(LETTERS[1:5], 5),25,replace = FALSE))
x
cbind(sample( rep(LETTERS[1:5], 5),25,replace = FALSE))
c(cbind(sample( rep(LETTERS[1:5], 5),25,replace = FALSE)))
setwd("~/Projects/NEIWork/SATCorrelations/git/thomas-satSef/satSef/figures/Fig08SpikeCorr/testSankey")
library(networkD3)
URL <- "https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata/energy.json"
Energy <- jsonlite::fromJSON(URL)
head( Energy$links )
head( Energy$nodes )
p <- sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p
conns <- jsonlite::fromJSON("connErrorOther.json")
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p1
p1
conns
library(htmlwidgets)
saveWidget(p1, file=paste0( getwd(), "/HtmlWidget/sankeyConn.html"))
saveWidget(p1, file=paste0( getwd(), "sankeyConn.html"))
getwd()
saveWidget(p1, file=paste0( getwd(), "sankeyConn.html"))
conns <- jsonlite::fromJSON("connErrorOther.json")
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "counts", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p1
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "rhoVal", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p1
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "rhoValMean", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p1
conns
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "counts", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p1
conns <- jsonlite::fromJSON("sankErrorTimingAccuErrorOtherFast.json")
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "counts", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p1
help sankeyNetwork()
conns$links$value <- conns$links$counts/sum(conns$links$counts)
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
units = "TWh", fontSize = 12, nodeWidth = 30)
p1
conns$links
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 30)
p1
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 10)
p1
conns$nodes[conns$links$source + 1]
conns$nodes[conns$links$source + 1,'name']
conns <- jsonlite::fromJSON("sankErrorTimingAccuErrorOtherFast2.json")
conns$links$value <- conns$links$counts/sum(conns$links$counts)
conns
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 10,)
p1
conns <- jsonlite::fromJSON("sankErrorTimingAccuErrorOtherFast2.json")
conns$links$value <- conns$links$counts/sum(conns$links$counts)
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 10,)
p1
conns <- jsonlite::fromJSON("sankErrorTimingAccuErrorOtherFast.json")
conns$links$value <- conns$links$counts/sum(conns$links$counts)
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 10,)
p1
conns
conns <- jsonlite::fromJSON("sankErrorTimingAccuErrorOtherFast.json")
conns$links$value <- conns$links$counts/sum(conns$links$counts)
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 10,)
p1
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 10,)
conns$nodes[conns$links$source + 1,'name']
conns <- jsonlite::fromJSON("sankErrorTimingAccuErrorOtherFast.json")
conns$links$value <- conns$links$counts/sum(conns$links$counts)
conns$links$linkColor <- c("Minus","Minus","Plus","Plus","Minus","Minus","Plus","Plus")
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 10,LinkGroup = "linkColor")
p1
conns
p2 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "rhoValMean", NodeID = "name",
fontSize = 12, nodeWidth = 10,LinkGroup = "linkColor")
p2
conns$links$absMean <- abs(conns$links$rhoValMean)
p2 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "absMean", NodeID = "name",
fontSize = 12, nodeWidth = 10,LinkGroup = "linkColor")
p2
conns
p1
p1 <- sankeyNetwork(Links = conns$links, Nodes = conns$nodes, Source = "source",
Target = "target", Value = "counts", NodeID = "name",
fontSize = 12, nodeWidth = 10,LinkGroup = "linkColor")
p1
conns
